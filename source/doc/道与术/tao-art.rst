===============
coding的道与术
===============
.. note::
    - 将工作中涉及编码的的所见、所听、所感，统统记录在这里。
    - 创建时间：2020-05-23
    - 更新时间：2020-06-24

工具/调试
============
1. 一般来说，使用Pycharm进行开发还是比较方便的，有较为完善的调试工具和交互界面，比较高效。善于使用工具可以大大提高工程开发的效率，要有意识去尝试方便的开发工具。也可以使用VSCode工具（插件化生态做的可以，界面简洁功能同样强大）
2. 对于一个专业的以开发为营生的人来说，开发前准备好两个基本工具是很有必要的。一是个人喜欢且具备高效率的IDE、二是保证随时能够Google！
3. 公司的日常开发，必然是协作。这时必须熟练使用GIT命令及创建分支与commit code的规范，开发环境最好使用虚拟环境，推荐使用的工具有：pipenv:虚拟环境管理工具、pyenv:Python版本管理工具。以上都是作为一个有开发经验人所应具备的。
4. 有一个能力必须在日常实践中有意识的训练：debuge、debuge、debuge!!!
5. Docker作为一个工具，在部署环节可大大减少工作量，以配置文件代替大量的复杂环节，对后续的可扩展起到一定帮助作用。
6. pycharm 官方学习文档包含工程方面的讲解比较全面，想快速学习相关调试等可以进入官方文档学习。

精益代码
==========
1. 看到公司对于代码的要求：简洁优美、重要的是代码的可扩展能力和易用性，需要在开发中去思考代码如何能够最大化扩展性能。主要有几个特点：封装、高内聚，低耦合、兼容性。
2. 对于新进公司的人才，当接触到公司庞大的代码时，可以在具体的任务背景下去运行并调试代码，需要带着问题去看代码，如：参数是什么格式或类型、传参过程是怎样的、最终返回了什么等等。还有一个技巧就是参考并手敲（经典的代码2遍起吧）并能运行前人写的代码，注意人家的命名规范和解决问题的思路等等。这个过程可能会有些痛苦（目前（201907）的我）但是成为一个优秀程序员的必经之路，没有什么捷径可走！
3. 如何写出"有味道"的代码，主要从两个方面入手：一是标准的代码风格；二是优秀的具有逻辑的实现。

Code Review
================
1. CR原则梳理 `脑图 <http://naotu.baidu.com/file/56ee560ce52d4e48fa49982d799c0f29?token=399924fdebcdb173>`_